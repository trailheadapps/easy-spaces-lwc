# Unique name for this workflow
name: CI on Pre-release PR

# Definition when the workflow should run
on:
    pull_request:
        types: [opened, edited, synchronize, reopened]
        branches:
            - prerelease/spring[2-9][0-9]
            - prerelease/summer[2-9][0-9]
            - prerelease/winter[2-9][0-9]

# Jobs to be executed
jobs:
    format-lint-lwc-tests:
        runs-on: ubuntu-latest
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Cache node_modules to speed up the process
            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: npm ci

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify

            # Lint LWC / Aura
            - name: 'Lint Lightning Web Components / Aura Components'
              run: npm run lint

            # LWC unit tests
            - name: 'Unit test Lightning Web Components'
              run: npm run test:unit:coverage

            # Upload code coverage data
            - name: 'Upload code coverage for LWC to Codecov.io'
              uses: codecov/codecov-action@v2.0.2
              with:
                  flags: LWC

    scratch-org-test:
        runs-on: ubuntu-latest
        needs: format-lint-lwc-tests
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Create scratch org
            - name: 'Create scratch org'
              run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1 release=Preview

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: sfdx force:source:push

            # Assign permissionset
            - name: 'Assign permissionset to default user'
              run: |
                  sfdx force:user:permset:assign -n EasySpacesObjects
                  sfdx force:user:permset:assign -n SpaceManagementApp

            # Import sample data
            - name: 'Import sample data'
              run: |
                  sfdx force:data:tree:import --plan ./data/Plan1.json
                  sfdx force:data:tree:import --plan ./data/Plan2.json

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: sfdx force:apex:test:run -c -r human -d ./tests/apex -w 20

            # Delete temporary test file that Codecov is unable to parse
            - name: 'Delete coverage file (temporary step)'
              run: rm ./tests/apex/test-result-707*-codecoverage.json

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v2.0.2
              with:
                  flags: Apex

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sfdx force:org:delete -p -u scratch-org

    trigger-packaging:
        runs-on: ubuntu-latest
        needs: scratch-org-test
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Check for package changes using git diff
            - name: 'Check for package changes'
              id: checkForChanges
              run: |
                  git fetch origin $GITHUB_BASE_REF --depth=1
                  changedPaths=$( git diff-tree --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA )

                  set +e
                  changedPackages=()

                  if [ $(echo "$changedPaths" | grep -c '^es-base-objects$') == 1 ]; then
                      changedPackages+=( 'ESObjects' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^es-base-styles$') == 1 ]; then
                      changedPackages+=( 'ESBaseStylesLWC' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^es-base-code$') == 1 ]; then
                      changedPackages+=( 'ESBaseCodeLWC' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^es-space-mgmt$') == 1 ]; then
                      changedPackages+=( 'ESSpaceMgmtLWC' )
                  fi

                  echo "Changed packages (${#changedPackages[@]}):"
                  for i in ${changedPackages[@]}; do
                      echo "- $i"
                  done

                  changedPackagesJson='[]'
                  if (( ${#changedPackages[@]} > 0 )); then
                      changedPackagesJson=$(printf '%s\n' "${changedPackages[@]}" | jq -R . | jq -c -s .)
                  fi
                  echo "::set-output name=changes::$changedPackagesJson"

            # Trigger packaging pre-release PR workflow
            - name: 'Trigger packaging pre-release PR workflow if needed'
              uses: peter-evans/repository-dispatch@v1.1.0
              if: ${{ steps.checkForChanges.outputs.changes != '[]' }}
              with:
                  token: ${{ secrets.BOT_ACCESS_TOKEN }}
                  event-type: start-packaging-pr-prerelease
                  client-payload: '{ "ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "packageNames": ${{ steps.checkForChanges.outputs.changes }} }'
