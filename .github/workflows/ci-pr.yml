# Unique name for this workflow
name: CI on PR

# Definition when the workflow should run
on:
    workflow_dispatch:
        inputs:
            prerelease:
                description: 'Run on a prerelease org?'
                required: false
                type: boolean
    pull_request:
        types: [opened, edited, synchronize, reopened]
        branches-ignore:
            - auto/packaging*

# Workflow environment variables
env:
    # Is the PR base branch a prerelease branch
    IS_PRERELEASE: ${{ startsWith(github.event.pull_request.base.ref, 'prerelease/') || inputs.prerelease }}

# Jobs to be executed
jobs:

    # Formatting and linting only runs on human-submitted PRs
    format-lint-lwc-tests:
        if: github.actor != 'trailheadapps-bot'
        runs-on: trailheadapps-Ubuntu
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3

            # Install Volta to enforce proper node and package manager versions
            - name: 'Install Volta'
              uses: volta-cli/action@v4

            # Cache node_modules to speed up the process
            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v3
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: HUSKY=0 npm ci

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify

            # Lint LWC / Aura
            - name: 'Lint Lightning Web Components / Aura Components'
              run: npm run lint

            # LWC unit tests
            - name: 'Unit test Lightning Web Components'
              run: npm run test:unit:coverage

   
    scratch-org-test:
        runs-on: trailheadapps-Ubuntu
        needs: format-lint-lwc-tests
        if: github.actor != 'dependabot[bot]'
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Create prerelease scratch org
            - name: 'Create prerelease scratch org'
              if: ${{ env.IS_PRERELEASE }}
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1 --release=preview

            # Create scratch org
            - name: 'Create scratch org'
              if: ${{ !env.IS_PRERELEASE }}
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: sf project deploy start

            # Assign permissionset
            - name: 'Assign permissionset to default user'
              run: |
                  sf org assign permset -n EasySpacesObjects
                  sf org assign permset -n SpaceManagementApp

            # Import sample data
            - name: 'Import sample data'
              run: |
                  sf data tree import -p ./data/Plan1.json
                  sf data tree import -p ./data/Plan2.json

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: sf apex test run -c -r human -d ./tests/apex -w 20

           

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sf org delete scratch -p -o scratch-org

    trigger-packaging:
        runs-on: trailheadapps-Ubuntu
        needs: scratch-org-test
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3

            # Check for package changes using git diff
            - name: 'Check for package changes'
              id: checkForChanges
              run: |
                  git fetch origin $GITHUB_BASE_REF --depth=1
                  changedPaths=$( git diff-tree --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA )

                  set +e
                  changedPackages=()

                  if [ $(echo "$changedPaths" | grep -c '^es-base-objects$') == 1 ]; then
                      changedPackages+=( 'ESObjects' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^es-base-styles$') == 1 ]; then
                      changedPackages+=( 'ESBaseStylesLWC' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^es-base-code$') == 1 ]; then
                      changedPackages+=( 'ESBaseCodeLWC' )
                  fi

                  if [ $(echo "$changedPaths" | grep -c '^es-space-mgmt$') == 1 ]; then
                      changedPackages+=( 'ESSpaceMgmtLWC' )
                  fi

                  echo "Changed packages (${#changedPackages[@]}):"
                  for i in ${changedPackages[@]}; do
                      echo "- $i"
                  done

                  changedPackagesJson='[]'
                  if (( ${#changedPackages[@]} > 0 )); then
                      changedPackagesJson=$(printf '%s\n' "${changedPackages[@]}" | jq -R . | jq -c -s .)
                  fi
                  echo "changes=$changedPackagesJson" >> $GITHUB_OUTPUT

            # Trigger packaging PR workflow
            - name: 'Trigger packaging PR workflow if needed'
              uses: peter-evans/repository-dispatch@v2
              if: steps.checkForChanges.outputs.changes != '[]'
              with:
                  token: ${{ secrets.BOT_ACCESS_TOKEN }}
                  event-type: start-packaging-pr
                  client-payload: '{ "ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "packageNames": ${{ steps.checkForChanges.outputs.changes }}, "isPrelease": "${{ env.IS_PRERELEASE }}" }'
